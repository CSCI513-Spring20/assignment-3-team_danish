/***********************************************************
 CSCI 513 - Assignment 3 - Spring 2020

 Progammer: Danish Khalid
 Z-ID: z1858350
 Section: 1
 Date Due: April 13, 2020

 Purpose: This program implements thread pooling and scheduling
 to generate prime numbers.
 ************************************************************/
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Scanner;

public class Start extends Task {
    private int start;
    private int end;
    private ArrayList<Integer> generatedPrimeNumbers;
    public Start(int start, int end) {
        super("Starting class:" + start + "," + end);
        generatedPrimeNumbers = new ArrayList<Integer>();
        this.start = start;
        this.end = end;
    }

    public static boolean isPrime(int value) {
        if( value == 0 || value == 1) {
            return false;
        }
        for (int i = 2; i <= value / 2; ++i) {
            if (value % i == 0) {
                return false;
            }
        }
        return true;
    }


    @Override
    public void run() {
        System.out.println("Task [" + this.getName() + "] starts running with " + Thread.currentThread().getName());
        for (int i = start; i <= end; ++i) {
            if (isPrime(i)) {
                generatedPrimeNumbers.add(i);
            }
        }
        System.out.println("Task [" + this.getName() + "] generated prime numbers " + Arrays.toString(generatedPrimeNumbers.toArray()) );
        System.out.println("Task [" + this.getName() + "] finished with " + generatedPrimeNumbers.size() + " prime numbers generated by " + Thread.currentThread().getName());
    }


    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter upper limit of input range: ");
        int upperBound = scanner.nextInt();
        System.out.print("Enter number of threads required to generate the prime numbers: ");
        int threadNum = scanner.nextInt();
        System.out.print("Enter number of threads in the thread pool: ");
        int threadPoolSize = scanner.nextInt();
        ThreadPool threadPool = new ThreadPool(threadPoolSize);
        int taskSizePerThread = (int) Math.ceil(upperBound / threadNum);

        ArrayList<Start> tasks = new ArrayList<Start>();
        int lowerLimit = 0;
        int upperLimit = lowerLimit + taskSizePerThread;
        while (upperLimit <= upperBound) {
            Start task = new Start(lowerLimit, upperLimit - 1);
            threadPool.execute(task);
            tasks.add(task);
            lowerLimit = upperLimit;
            upperLimit = lowerLimit + taskSizePerThread;
        }

        threadPool.waitForAllTasks();
        threadPool.shutdown();
        scanner.close();
    }
}